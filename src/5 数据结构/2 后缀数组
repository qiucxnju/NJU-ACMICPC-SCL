#include<iostream>
#include<cstdio>
#include<vector>
#include<cstring>
#include<string>
using namespace std;
const int maxn=10000;
#define F(x) ((x)/3+((x)%3==1?0:tb))
#define G(x) ((x)<tb?(x)*3+1:((x)-tb)*3+2)

//值得注意的是，rank数组 与 sa数组互逆 ，所以可以根据sa  在O（n）时间内求出rank 
//以下为倍增算法实现  O（nlogn） 
//r 为字符串数组  ,sa 为结果S 的n 个后缀从小到大进行排序之后把排好序的后缀的开头位置顺序，也就是字典序 
//次放入sa 中 

int wa[maxn],wb[maxn],wv[maxn],ws_[maxn];
int cmp(int *r,int a,int b,int l)
{
  return r[a]==r[b]&&r[a+l]==r[b+l];
}
//n是r数组的长度，即strlen（r）,m 为语言集的最大编号 
void da(int *r,int *sa,int n,int m)
{
   int i,j,p,*x=wa,*y=wb,*t;
   for(i=0;i<m;i++) ws_[i]=0;
   for(i=0;i<n;i++) ws_[x[i]=r[i]]++;
   for(i=1;i<m;i++) ws_[i]+=ws_[i-1];
   for(i=n-1;i>=0;i--) sa[--ws_[x[i]]]=i;

   for(j=1,p=1;p<n;j*=2,m=p)
   {
    for(p=0,i=n-j;i<n;i++) y[p++]=i;
    for(i=0;i<n;i++) if(sa[i]>=j) y[p++]=sa[i]-j;
    for(i=0;i<n;i++) wv[i]=x[y[i]];
    for(i=0;i<m;i++) ws_[i]=0;
    for(i=0;i<n;i++) ws_[wv[i]]++;
    for(i=1;i<m;i++) ws_[i]+=ws_[i-1];
    for(i=n-1;i>=0;i--) sa[--ws_[wv[i]]]=y[i];
    for(t=x,x=y,y=t,p=1,x[sa[0]]=0,i=1;i<n;i++)
     x[sa[i]]=cmp(y,sa[i-1],sa[i],j)?p-1:p++;
   }
}
/*int wa[maxn],wb[maxn],wv[maxn],ws[maxn];
int cmp(int *r,int a,int b,int l)
{return r[a]==r[b]&&r[a+l]==r[b+l];}
void da(int *r,int *sa,int n,int m)
{
  int i,j,p,*x=wa,*y=wb,*t;
  for(i=0;i<m;i++) ws[i]=0;
  for(i=0;i<n;i++) ws[x[i]=r[i]]++;
  for(i=1;i<m;i++) ws[i]+=ws[i-1];
  for(i=n-1;i>=0;i--) sa[--ws[x[i]]]=i;
  for(j=1,p=1;p<n;j*=2,m=p)
  {
    for(p=0,i=n-j;i<n;i++) y[p++]=i;
    for(i=0;i<n;i++) if(sa[i]>=j) y[p++]=sa[i]-j;
    for(i=0;i<n;i++) wv[i]=x[y[i]];
    for(i=0;i<m;i++) ws[i]=0;
    for(i=0;i<n;i++) ws[wv[i]]++;
    for(i=1;i<m;i++) ws[i]+=ws[i-1];
    for(i=n-1;i>=0;i--) sa[--ws[wv[i]]]=y[i];
    for(t=x,x=y,y=t,p=1,x[sa[0]]=0,i=1;i<n;i++)
    x[sa[i]]=cmp(y,sa[i-1],sa[i],j)?p-1:p++;
  }
}*/
//以下是DC3算法  O(n)
//r 数组和sa 数组的大小都要是3*n
//下面的三行都是必须的。。为了避免名冲突 
//#define F(x) ((x)/3+((x)%3==1?0:tb))
//#define G(x) ((x)<tb?(x)*3+1:((x)-tb)*3+2)
//int wa[maxn],wb[maxn],wv[maxn],ws_[maxn];
int c0(int *r,int a,int b)
{
  return r[a]==r[b]&&r[a+1]==r[b+1]&&r[a+2]==r[b+2];
}
int c12(int k,int *r,int a,int b)
{  if(k==2) return r[a]<r[b]||r[a]==r[b]&&c12(1,r,a+1,b+1);
   else return r[a]<r[b]||r[a]==r[b]&&wv[a+1]<wv[b+1];
}
void sort_sa(int *r,int *a,int *b,int n,int m)
{
   int i;
   for(i=0;i<n;i++) wv[i]=r[a[i]];
   for(i=0;i<m;i++) ws_[i]=0;
   for(i=0;i<n;i++) ws_[wv[i]]++;
   for(i=1;i<m;i++) ws_[i]+=ws_[i-1];
   for(i=n-1;i>=0;i--) b[--ws_[wv[i]]]=a[i];
   return;
}
void dc3(int *r,int *sa,int n,int m)
{
   int i,j,*rn=r+n,*san=sa+n,ta=0,tb=(n+1)/3,tbc=0,p;
   r[n]=r[n+1]=0;
   for(i=0;i<n;i++) if(i%3!=0) wa[tbc++]=i;
   
   sort_sa(r+2,wa,wb,tbc,m);
   sort_sa(r+1,wb,wa,tbc,m);
   sort_sa(r,wa,wb,tbc,m);
   
   for(p=1,rn[F(wb[0])]=0,i=1;i<tbc;i++)
   rn[F(wb[i])]=c0(r,wb[i-1],wb[i])?p-1:p++;
   
   if(p<tbc) dc3(rn,san,tbc,p);
   else for(i=0;i<tbc;i++) san[rn[i]]=i;
   
   for(i=0;i<tbc;i++) if(san[i]<tb) wb[ta++]=san[i]*3;
   
   if(n%3==1) wb[ta++]=n-1;
   
   sort_sa(r,wb,wa,ta,m);
   
   for(i=0;i<tbc;i++) wv[wb[i]=G(san[i])]=i;
   for(i=0,j=0,p=0;i<ta && j<tbc;p++)
   
   sa[p]=c12(wb[j]%3,r,wa[i],wb[j])?wa[i++]:wb[j++];
   
   for(;i<ta;p++) sa[p]=wa[i++];
   for(;j<tbc;p++) sa[p]=wb[j++];
   
} 

//height 数组：定义height[i]=suffix(sa[i-1])和suffix(sa[i])的最长公共前缀
//算法如下，复杂度O（n）
//一个重要的结论：suffix(j) 和suffix(k) 的最长公共前缀为height[rank[j]+1],
//height[rank[j]+2], height[rank[j]+3], … ,height[rank[k]]中的最小值。 

//待排序的字符串放在r 数组中，从r[0]到r[n-1]，长度为n，且最大值小
//于m。为了函数操作的方便，约定除r[n-1]外所有的r[i]都大于0, r[n-1]=0。
//函数结束后，结果放在sa 数组中，从sa[0]到sa[n-1]。
int rank[maxn],height[maxn];
void calheight(int *r,int *sa,int n)
{
   int i,j,k=0;
   for(i=1;i<=n;i++) rank[sa[i]]=i;
   for(i=0;i<n;height[rank[i++]]=k)
   for(k?k--:0,j=sa[rank[i]-1];r[i+k]==r[j+k];k++);
   return;
} 

char str[100];
int  r[100];
int  sa[100];
int main()
{
  while(cin>>str){
    int L=strlen(str);
    for(int i=0;i<L;i++)r[i]=str[i]-'0';
    for(int i=0;i<L;i++)sa[i]=i;
    r[L]=0;
    da(r,sa,L+1,200); 
    cout<<"haha\n";
    for(int i=0;i<L;i++)
      cout<<sa[i]<<' ';cout<<endl;
    calheight(r,sa,L);
    for(int i=0;i<L;i++)
      cout<<height[i]<<' ';cout<<endl;
  }
}
