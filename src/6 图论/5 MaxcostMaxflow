// 最小费用路增广 bySPFA
//*@
#include <cstdio>
#include <cstring>
#include <queue>

using namespace std;

#define MN 30
#define MM 100000
#define INF 0x7fffffff

int T,N,M,K;
int Lim[MN],Like[MN][MN],l,cases;

struct MaxcostMaxflow
{
  struct E_Node
  {
    int v,f,c,op,ne;
  } E[MM];
  int R[MN],sz;
  int S,T;
  void Add( int a, int b, int c, int d)
  {
    E[++sz].v=b;E[sz].ne=R[a];R[a]=sz;E[sz].f=c;E[sz].c=d;
  }
  void Ins( int a, int b, int c, int d)
  {
    if (!c) return ;
    Add(a,b,c,d);E[sz].op=sz+1;
    Add(b,a,0,-d);E[sz].op=sz-1;
  }
  bool B[MN];
  int D[MN],F[MN];
  int maxcost,maxflow;
  void init()
  {
    sz=0;
    memset(R,0,sizeof R);
    maxcost=maxflow=0;
  }
  queue<int> Q;
  bool SPFA()
  {
    int u,m,p;
    while (!Q.empty()) Q.pop();
    Q.push(S);
    for (int i=1;i<=T;i++) D[i]=-INF,B[i]=0;
    D[S]=0;B[S]=1;
    while (!Q.empty())
    {
      u=Q.front();
      Q.pop();
      for (p=R[u];p;p=E[p].ne)
        if (E[p].f&&D[u]+E[p].c>D[E[p].v])
        {
          D[E[p].v]=D[u]+E[p].c;
          F[E[p].v]=p;
          if (!B[E[p].v])
          {
            B[E[p].v]=1;
            if (!Q.empty()&&D[Q.front()]<D[E[p].v])
            {
              Q.push(Q.front());
              Q.front()=E[p].v;
            } else Q.push(E[p].v);
          }
        }
      B[u]=0;
    }
    if (D[T]==-INF) return 0;
    else 
    {
      u=T;m=INF;
      while (u!=S)
      {
        m=min(m,E[F[u]].f);
        u=E[E[F[u]].op].v;
      }
      maxflow+=m;
      maxcost+=m*D[T];
      u=T;
      while (u!=S)
      {
        E[F[u]].f-=m;
        E[E[F[u]].op].f+=m;
        u=E[E[F[u]].op].v;
      }
      return 1;
    }
  }
} G;
/*
    G.S=N+M+1;G.T=G.S+1;
    for (int j=1;j<=M;j++) G.Ins(N+j,G.T,1,0);
    while (G.SPFA());
    if (G.maxcost+M-G.maxflow>=l) puts("YES");
    else puts("NO");
*/
