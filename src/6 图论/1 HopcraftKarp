// HK 解二分图匹配
// 复杂度 O(sqrt(N)*M)
//*@
#include <cstdio>
#include <cstring>

#define MN 50001
#define MM 150001


struct E_Node
{
  int v,ne;
} E[MM];

int R[MN],e_sz;
int N,M;

void Add( int a, int b)
{
  E[++e_sz].v=b;E[e_sz].ne=R[a];R[a]=e_sz;
}

void init()
{
  e_sz=0;
  memset(R,0,sizeof R);
}


int ans,qsz;

int Qu[MN*2],Lx[MN],Ly[MN],Cx[MN],Cy[MN];

bool BFS()
{
  int p,u,v;
  bool flag=0;
  qsz=0;
  for (int i=1;i<=N;i++)
    if (Cx[i]==-1) Qu[++qsz]=i,Lx[i]=1;
  memset(Ly,0xff,sizeof(Ly[0])*(M+1));
  for (int i=1;i<=qsz;i++)
  {
    u=Qu[i];
    for (p=R[u];p;p=E[p].ne)
    {
      v=E[p].v;
      if (Ly[v]==-1)
      {
        Ly[v]=Lx[u]+1;
        if (Cy[v]==-1) flag=1;
        else 
        {
          Qu[++qsz]=Cy[v];
          Lx[Cy[v]]=Ly[v]+1;
        }
      }
      }
  }
  return flag;
}

bool Dfs( int k)
{
  for (int p=R[k];p;p=E[p].ne)
    if (Ly[E[p].v]==Lx[k]+1)
    {
      Ly[E[p].v]=-1;
      if (Cy[E[p].v]==-1||Dfs(Cy[E[p].v]))
      {
        Cy[E[p].v]=k;
        Cx[k]=E[p].v;
        return 1;
      }
    }
  return 0;
}


      Add(a,b);
  
    ans=0;
    memset(Cx,0xff,(N+1)*sizeof(Cx[0]));
    memset(Cy,0xff,(M+1)*(sizeof(Cy[0])));
    while (BFS())
    {
      for (int i=N;i;i--)
        if (Cx[i]==-1&&Dfs(i)) ans++;
    }
    printf("%d\n",ans);
}


