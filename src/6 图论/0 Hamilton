//Hamilton 回路存在条件：
// 每个点的度数超过一半点数
// 复杂度 N^3 左右
//@
#include <cstdio>
#include <cstring>

#define MN 201

int map[MN][MN];
int N,M;
int ans[MN];

void reverse( int ans[MN], int s, int t)
{
  int temp;
  while (s<t)
  {
    temp=ans[s];
    ans[s]=ans[t];
    ans[t]=temp;
    s++;t--;
  }
}

void Hamilton()
{
  int s=1,t;
  int ansi=2,i,j,w,temp;
  bool vis[MN]={false};
  memset(vis,0,sizeof vis);
  for (i=1;i<=N;i++)
    if (map[s][i]) break;
  t=i;
  vis[s]=vis[t]=1;
  ans[0]=s;ans[1]=t;
  while (1)
  {
    while (1)
    {
      for (i=1;i<=N;i++)
        if (map[t][i]&&!vis[i])
        {
          ans[ansi++]=i;
          vis[i]=1;
          t=i;
          break;
        }
      if (i>N) break;
    }
    w=ansi-1;
    i=0;
    reverse(ans,i,w);
    temp=s;
    s=t;t=temp;
    while (1)
    {
      for (i=1;i<=N;i++)
        if (map[t][i]&&!vis[i])
        {
          ans[ansi++]=i;vis[i]=1;
          t=i;
          break;
        }
      if (i>N) break;
    }
    if (!map[s][t])
    {
      for (i=1;i<ansi-2;i++)
        if (map[ans[i]][t]&&map[s][ans[i+1]]) break;
      w=ansi-1;
      i++;
      t=ans[i];
      reverse(ans,i,w);
    }
    if (ansi==N) return;
    for (j=1;j<=N;j++)
    {
      if (vis[j]) continue;
      for (i=1;i<ansi-2;i++)
        if (map[ans[i]][j]) break;
      if (map[ans[i]][j]) break;
    }
    s=ans[i-1];
    t=j;
    reverse(ans,0,i-1);
    reverse(ans,i,ansi-1);
    ans[ansi++]=j;
    vis[j]=1;
  }
}

int main()
{
  while (scanf("%d%d",&N,&M)!=EOF)
  {
    memset(map,0,sizeof map);
    int a,b;
    while (M--)
    {
      scanf("%d%d",&a,&b);
      map[a][b]=map[b][a]=1;
    }

    Hamilton();
    for (int i=0;i<N-1;i++) printf("%d ",ans[i]);
    printf("%d\n",ans[N-1]);
    for (int i=0;i<N-1;i++)
      if (!map[ans[i]][ans[(i+1)%N]]) while (1);
  }
  return 0;
}
