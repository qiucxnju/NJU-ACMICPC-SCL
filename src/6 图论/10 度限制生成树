#include <iostream>
#include <fstream>
#include <climits>
#include <queue>
#include <map>
#include <cstring>
#include <string>
using namespace std;
const int maxn = 25;
struct node
{
  int v, w;
};
struct cmp
{
  bool operator() (const node &a, const node &b)
  {
    return a.w > b.w; // >是从小到大.
  }
};
int n, m, s; // n 个点，m 条边，s 为原点. V0点为有度数限制的点
int num;
int minV0[maxn]; 
int total; // 限制的度数.
int dist[maxn];
int g[maxn][maxn]; // 用二维数组来记录图。
bool p[maxn]; 
int pre[maxn]; 
int max_value[maxn], max_value_v[maxn];
priority_queue <node, vector<node>, cmp> Q;
map <string, int> Map;
int ans;
void Prim(void);
void Solve(void);
void Cal_max_value(int t);
int main(void)
{
  int i, j;
  string name1, name2;
  int a, b, w;
  map <string, int>::iterator iter;
  // 初始化。
  Map.clear();
  Map["Park"] = 0;
  for (i = 0; i <= maxn - 1; i++)
  {
    dist[i] = INT_MAX;
    pre[i] = -1;
    for (j = 0; j <= maxn - 1; j++)
    {
      g[i][j] = INT_MAX;
    }
  }
  n = 0;
  cin >> m;
  for (i = 1; i <= m; i++)
  {
   cin >> name1 >> name2 >> w;
   iter = Map.find(name1);
   if (iter == Map.end())
   { // 说明该结点还不存在.
     n++;
     Map[name1] = n;
   }
   a = Map[name1];
   iter = Map.find(name2);
   if (iter == Map.end())
   { // 说明该结点还不存在.
     n++;
     Map[name2] = n;
   }
   b = Map[name2];
   if (g[a][b] > w)
   {
     g[a][b] = g[b][a] = w;
   }
  }
  cin >> total; // 输入限制的度数.
   memset(p, 0, sizeof(p)); num = 0;
   for (i = 1; i <= n; i++)
   {
    if (!p[i])
    {
      s = i;
      num++; minV0[num] = s;
     // 求除去限制结点的最小生成树.
     Prim();
    }
   }
  ans = 0;
  for (i = 1; i <= n; i++) ans += dist[i];
  // 求最小度限制生成树.
  Solve();
  printf("Total miles driven: %d\n", ans);
  return 0;
}
void Prim(void)
{
  int i, j, k;
  node mini, temp;
  while (!Q.empty()) Q.pop();
  dist[s] = 0;
  temp.v = s; temp.w = 0;
  Q.push(temp);
  for (k = 1; k <= n; k++)
  {
    while (!Q.empty())
    {
      mini = Q.top();
      Q.pop();
      j = mini.v;
      if (!p[j])
      {
        p[j] = 1;
        if (g[0][j] < g[0][minV0[num]])
        { 
          minV0[num] = j;
        }
        for (i = 1; i <= n; i++)
        {
          if (i != j && !p[i] && dist[i] > g[j][i])
          {
            dist[i] = g[j][i];
            pre[i] = j;
            temp.w = dist[i]; temp.v = i;
            Q.push(temp);
          }
        }
        break;
      }
    }
  }
}

void Cal_max_value(int t)
{ 
  int i, j, k;
  int Stack[maxn]; 
  int top(-1);
  i = t;
  while (pre[i] != 0 && pre[i] != -1)
  {
    p[i] = 1;
   Stack[++top] = i;
   i = pre[i];
  }
  if (top < 0) return ;
  j = Stack[top];
  max_value[j] = g[j][pre[j]];
  max_value_v[j] = j;
  
  for (i = top - 1; i >= 0; i--)
  {
    j = Stack[i]; k = Stack[i + 1];
   if (max_value[k] > g[j][pre[j]])
   {
     max_value[j] = max_value[k];
     max_value_v[j] = max_value_v[k];
   }
   else
   {
     max_value[j] = g[j][pre[j]];
     max_value_v[j] = j;
   }
  }
}
void Solve(void)
{
  int i, j, k, l;
  int mini, opti_i, opti_maxV; 
.
  for (k = 1; k <= num; k++)
  {
   ans += g[0][minV0[k]];

  j = minV0[k]; i = pre[j]; 
   while (i != -1)
   {
     l = i;
     i = pre[l];
     pre[l] = j;
     j = l;
   }
   pre[minV0[k]] = 0;
  }
  
  memset(p, 0, sizeof(p));
  for (i = 1; i <= n; i++)
  {
   if (!p[i])
   {
     Cal_max_value(i);
   }
  }
  for (k = 1; k <= total - num; k++)
  {
    mini = 0; 
   for (i = 1; i <= n; i++)
   {
     if (pre[i] == 0) continue;

     if (g[0][i] - max_value[i] < mini)
     {
      mini = g[0][i] - max_value[i];
      opti_i = i; opti_maxV = max_value_v[i];
     }
   }
   if (mini == 0) break; 
   ans += mini;
    
   pre[opti_maxV] = -1;
   j = opti_i; i = pre[j]; 
   while (i != -1)
   {
     l = i;
     i = pre[l];
     pre[l] = j;
     j = l;
   }
   pre[opti_i] = 0;
   Cal_max_value(opti_maxV);
  }
}
