// 计算cross product (P1-P0)x(P2-P0)
double xmult(CP &p1,CP &p2,CP &p0){
  return (p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);
}
double xmult(double x1,double y1,double x2,double y2,double x0,double y0){
  return (x1-x0)*(y2-y0)-(x2-x0)*(y1-y0);
}
double xmult(CP &v1, CP &v2){
  return v1.x * v2.y - v2.x * v1.y;
}

// 计算dot product (P1-P0).(P2-P0)
double dmult(CP &p1,CP &p2,CP &p0){
  return (p1.x-p0.x)*(p2.x-p0.x)+(p1.y-p0.y)*(p2.y-p0.y);
}
double dmult(double x1,double y1,double x2,double y2,double x0,double y0){
  return (x1-x0)*(x2-x0)+(y1-y0)*(y2-y0);
}
double dmult(CP &v1, CP &v2){
  return v1.x * v2.x + v1.y * v2.y;
}

// 计算向量v 的长度
double len(CP &v){
  return sqrt((v.x * v.x) + (v.y * v.y));
}

// 两点距离
double dis(CP &p1,CP &p2){
  return sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));
}
double dis(double x1,double y1,double x2,double y2){
  return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
}
double dis2(CP &p1,CP &p2){
  return (p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y);
}
double dis2(double x1,double y1,double x2,double y2){
  return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
}

// 判三点共线
int dots_inline(CP &p1,CP &p2,CP &p3){
  return zero(xmult(p1,p2,p3));
}
int dots_inline(double x1,double y1,double x2,double y2,double x3,double y3){
  return zero(xmult(x1,y1,x2,y2,x3,y3));
}

// 判点是否在线段上, 包括端点
int dot_online_in(CP &p,CL &l){
  return zero(xmult(p,l.a,l.b))&&(l.a.x-p.x)*(l.b.x-p.x)<eps&&(l.a.y-p.y)*(l.b.y-p.y)<eps;
}
int dot_online_in(CP &p,CP &l1,CP &l2){
  return zero(xmult(p,l1,l2))&&(l1.x-p.x)*(l2.x-p.x)<eps&&(l1.y-p.y)*(l2.y-p.y)<eps;
}
int dot_online_in(double x,double y,double x1,double y1,double x2,double y2){
  return zero(xmult(x,y,x1,y1,x2,y2))&&(x1-x)*(x2-x)<eps&&(y1-y)*(y2-y)<eps;
}

// 判点是否在线段上,不包括端点
int dot_online_ex(CP &p,CL &l){
  return dot_online_in(p,l)&&(!zero(p.x-l.a.x)||!zero(p.y-l.a.y))&&(!zero(p.x-l.b.x)||!zero(p.y-l.b.y));
}
int dot_online_ex(CP &p,CP &l1,CP &l2){
  return dot_online_in(p,l1,l2)&&(!zero(p.x-l1.x)||!zero(p.y-l1.y))&&(!zero(p.x-l2.x)||!zero(p.y-l2.y));
}
int dot_online_ex(double x,double y,double x1,double y1,double x2,double y2){
  return dot_online_in(x,y,x1,y1,x2,y2)&&(!zero(x-x1)||!zero(y-y1))&&(!zero(x-x2)||!zero(y-y2));
}

// 判两点在线段同侧, 点在线段上返回0 
int same_side(CP &p1,CP &p2,CL &l){
  return xmult(l.a,p1,l.b)*xmult(l.a,p2,l.b)>eps;
}
int same_side(CP &p1,CP &p2,CP &l1,CP &l2){
  return xmult(l1,p1,l2)*xmult(l1,p2,l2)>eps;
}

// 判两点在线段异侧, 点在线段上返回0 
int opposite_side(CP &p1,CP &p2,CL &l){
  return xmult(l.a,p1,l.b)*xmult(l.a,p2,l.b)<-eps;
}
int opposite_side(CP &p1,CP &p2,CP &l1,CP &l2){
  return xmult(l1,p1,l2)*xmult(l1,p2,l2)<-eps;
}

// 判两直线平行
int parallel(CL &u,CL &v){
  return zero((u.a.x-u.b.x)*(v.a.y-v.b.y)-(v.a.x-v.b.x)*(u.a.y-u.b.y));
}
int parallel(CP &u1,CP &u2,CP &v1,CP &v2){
  return zero((u1.x-u2.x)*(v1.y-v2.y)-(v1.x-v2.x)*(u1.y-u2.y));
}

// 判两直线垂直
int perpendicular(CL &u,CL &v){
  return zero((u.a.x-u.b.x)*(v.a.x-v.b.x)+(u.a.y-u.b.y)*(v.a.y-v.b.y));
}
int perpendicular(CP &u1,CP &u2,CP &v1,CP &v2){
  return zero((u1.x-u2.x)*(v1.x-v2.x)+(u1.y-u2.y)*(v1.y-v2.y));
}

// 判两线段相交, 包括端点和部分重合
int intersect_in(CL &u,CL &v){
  if (!dots_inline(u.a,u.b,v.a)||!dots_inline(u.a,u.b,v.b))
    return !same_side(u.a,u.b,v)&&!same_side(v.a,v.b,u);
  return dot_online_in(u.a,v)||dot_online_in(u.b,v)||dot_online_in(v.a,u)||dot_online_in(v.b,u);
}
int intersect_in(CP &u1,CP &u2,CP &v1,CP &v2){
  if (!dots_inline(u1,u2,v1)||!dots_inline(u1,u2,v2))
    return !same_side(u1,u2,v1,v2)&&!same_side(v1,v2,u1,u2);
  return dot_online_in(u1,v1,v2)||dot_online_in(u2,v1,v2)||dot_online_in(v1,u1,u2)||dot_online_in(v2,u1,u2);
}

// 判两线段相交, 不包括端点和部分重合
int intersect_ex(CL &u,CL &v){
  return opposite_side(u.a,u.b,v)&&opposite_side(v.a,v.b,u);
}
int intersect_ex(CP &u1,CP &u2,CP &v1,CP &v2){
  return opposite_side(u1,u2,v1,v2)&&opposite_side(v1,v2,u1,u2);
}

// 计算两直线交点, 注意事先判断直线是否平行! 
// 线段交点请另外判线段相交, 同时还是要判断是否平行
point intersection(CL &u,CL &v){
  point ret=u.a;
  double t=((u.a.x-v.a.x)*(v.a.y-v.b.y)-(u.a.y-v.a.y)*(v.a.x-v.b.x))
      /((u.a.x-u.b.x)*(v.a.y-v.b.y)-(u.a.y-u.b.y)*(v.a.x-v.b.x));
  ret.x+=(u.b.x-u.a.x)*t;
  ret.y+=(u.b.y-u.a.y)*t;
  return ret;
}
point intersection(CP &u1,CP &u2,CP &v1,CP &v2){
  point ret=u1;
  double t=((u1.x-v1.x)*(v1.y-v2.y)-(u1.y-v1.y)*(v1.x-v2.x))
      /((u1.x-u2.x)*(v1.y-v2.y)-(u1.y-u2.y)*(v1.x-v2.x));
  ret.x+=(u2.x-u1.x)*t;
  ret.y+=(u2.y-u1.y)*t;
  return ret;
}
// 求给定线段的中垂线 
line pbline(CL &l){
  line ret;ret.a = (l.a + l.b) / 2;
  double a = l.b.x - l.a.x, b = l.b.y - l.a.y;
  double c = (l.a.y - l.b.y) * ret.a.y + (l.a.x - l.b.x) * ret.a.x;
  if (!zero(a)){
    ret.b.y = 0;ret.b.x = -c / a;
    if (zero(dis(ret.a, ret.b))){
      ret.b.y = 1e10;ret.b.x = - (c - b * ret.b.y) / a;
    }
  }else{
    ret.b.x = 0.0;ret.b.y = -c / b;
    if (zero(dis(ret.a, ret.b))){
      ret.b.x = 1e10;ret.b.y = -(c - a * ret.b.x) / b;
    }
  }
  return ret;
}

// 点到直线上的最近点
point ptoline(CP &p,CL &l){
  point t=p;
  t.x+=l.a.y-l.b.y,t.y+=l.b.x-l.a.x;
  return intersection(p,t,l.a,l.b);
}
point ptoline(CP &p,CP &l1,CP &l2){
  point t=p;
  t.x+=l1.y-l2.y,t.y+=l2.x-l1.x;
  return intersection(p,t,l1,l2);
}

// 点到直线距离
double disptoline(CP &p,CL &l){
  return fabs(xmult(p,l.a,l.b))/dis(l.a,l.b);
}
double disptoline(CP &p,CP &l1,CP &l2){
  return fabs(xmult(p,l1,l2))/dis(l1,l2);
}
double disptoline(double x,double y,double x1,double y1,double x2,double y2){
  return fabs(xmult(x,y,x1,y1,x2,y2))/dis(x1,y1,x2,y2);
}

// 点到线段上的最近点
point ptoseg(CP &p,CL &l){
  point t=p;
  t.x+=l.a.y-l.b.y,t.y+=l.b.x-l.a.x;
  if (xmult(l.a,t,p)*xmult(l.b,t,p)>eps)
    return dis(p,l.a)<dis(p,l.b)?l.a:l.b;
  return intersection(p,t,l.a,l.b);
}
point ptoseg(CP &p,CP &l1,CP &l2){
  point t=p;
  t.x+=l1.y-l2.y,t.y+=l2.x-l1.x;
  if (xmult(l1,t,p)*xmult(l2,t,p)>eps)
    return dis(p,l1)<dis(p,l2)?l1:l2;
  return intersection(p,t,l1,l2);
}

// 点到线段距离
double disptoseg(CP &p,CL &l){
  point t=p;
  t.x+=l.a.y-l.b.y,t.y+=l.b.x-l.a.x;
  if (xmult(l.a,t,p)*xmult(l.b,t,p)>eps)
    return dis(p,l.a)<dis(p,l.b)?dis(p,l.a):dis(p,l.b);
  return fabs(xmult(p,l.a,l.b))/dis(l.a,l.b);
}
double disptoseg(CP &p,CP &l1,CP &l2){
  point t=p;
  t.x+=l1.y-l2.y,t.y+=l2.x-l1.x;
  if (xmult(l1,t,p)*xmult(l2,t,p)>eps)
    return dis(p,l1)<dis(p,l2)?dis(p,l1):dis(p,l2);
  return fabs(xmult(p,l1,l2))/dis(l1,l2);
}

// 线段到线段距离, 事先判断相交情况 
double dissegtoseg(CL &l1, CL &l2){
  return min(min(disptoseg(l1.a, l2), disptoseg(l1.b, l2)), min(disptoseg(l2.a, l1), disptoseg(l2.b, l1)));
}
double dissegtoseg(CP &l1a, CP &l1b, CP &l2a, CP &l2b){
  return min(min(disptoseg(l1a, l2a, l2b), disptoseg(l1b, l2a, l2b)), min(disptoseg(l2a, l1a, l1b), disptoseg(l2b, l1a, l1b)));
}

// 矢量V 以P 为顶点逆时针旋转angle 并放大scale 倍
point rotate(point v,point p,double angle,double scale){
  point ret=p;
  v.x-=p.x,v.y-=p.y;
  p.x=scale*cos(angle);
  p.y=scale*sin(angle);
  ret.x+=v.x*p.x-v.y*p.y;
  ret.y+=v.x*p.y+v.y*p.x;
  return ret;
}

// p 在新坐标系O(I,e1,e2) 中的坐标
point rotate(CP &p, CP &I, CP &e1, CP &e2){
  point p2;
  p2.x = I.x + e1.x * p.x + e1.y * p.y;
  p2.y = I.y + e2.x * p.x + e2.y * p.y;
  return p2;
  
}

//p 点绕原点按逆时针旋转angle 
point rotate(CP &p, double angle){
  point e1, e2, I;
  e1.x = cos(angle);e1.y = -sin(angle);
  e2.x = -e1.y;e2.y = e1.x;
  I.x = 0;I.y = 0;
  return rotate(p, I, e1, e2);
}

// 返回值[0, 4), 正比向量v1 到向量v2 的顺时针旋转角度 
double angle(CP &v1, CP &v2){
  double cosa = dmult(v1, v2) / len(v1) / len(v2);cosa = 1 - cosa;
  if (xmult(v1, v2) < 0) cosa = 4 - cosa;return cosa;
}
double angle(CP &v1, CP &a, CP &b){
  return angle(v1, b - a);
}
// 向量a-c 到b-c 的顺时针度数 
double angle(CP &a, CP &b, CP &c){
  //return angle(a - b, b - c);
  double cosa = dmult(a, b, c) / dis(a, c) / dis(b, c);cosa = 1 - cosa;
  if (xmult(a, b, c) < 0) cosa = 4 - cosa;return cosa;
}