// 判定凸多边形, 顶点按顺时针或逆时针给出, 允许相邻边共线
int is_convex(int n,point* p){
  int i,s[3]={1,1,1};
  for (i=0;i<n&&s[1]|s[2];i++)
    s[_sign(xmult(p[(i+1)%n],p[(i+2)%n],p[i]))]=0;
  return s[1]|s[2];
}

// 判定凸多边形, 顶点按顺时针或逆时针给出, 不允许相邻边共线
int is_convex_v2(int n,point* p){
  int i,s[3]={1,1,1};
  for (i=0;i<n&&s[0]&&s[1]|s[2];i++)
    s[_sign(xmult(p[(i+1)%n],p[(i+2)%n],p[i]))]=0;
  return s[0]&&s[1]|s[2];
}                                   

// 判点在凸多边形内或多边形边上, 顶点按顺时针或逆时针给出
int inside_convex(CP &q,int n,point* p){
  int i,s[3]={1,1,1};
  for (i=0;i<n&&s[1]|s[2];i++)
    s[_sign(xmult(p[(i+1)%n],q,p[i]))]=0;
  return s[1]|s[2];
}

// 判点在凸多边形内, 顶点按顺时针或逆时针给出, 在多边形边上返回0
int inside_convex_v2(CP &q,int n,point* p){
  int i,s[3]={1,1,1};
  for (i=0;i<n&&s[0]&&s[1]|s[2];i++)
    s[_sign(xmult(p[(i+1)%n],q,p[i]))]=0;
  return s[0]&&s[1]|s[2];
}

// 判点在任意多边形内,顶点按顺时针或逆时针给出
// on_edge 表示点在多边形边上时的返回值,offset 为多边形坐标上限
int inside_polygon(CP &q,int n,point* p,int on_edge=1){
  point q2;
  int i=0,count;
  while (i<n)
    for (count=i=0,q2.x=rand()+offset,q2.y=rand()+offset;i<n;i++)
      if (zero(xmult(q,p[i],p[(i+1)%n]))&&(p[i].x-q.x)*(p[(i+1)%n].x-q.x)<eps&&(p[i].y-q.y)*(p[(i+1)%n].y-q.y)<eps)
        return on_edge;
      else if (zero(xmult(q,q2,p[i])))
        break;
      else if (xmult(q,p[i],q2)*xmult(q,p[(i+1)%n],q2)<-eps&&xmult(p[i],q,p[(i+1)%n])*xmult(p[i],q2,p[(i+1)%n])<-eps)
        count++;
  return count&1;
}

// 判线段在任意多边形内, 顶点按顺时针或逆时针给出, 与边界相交返回1
int inside_polygon(CP &l1,CP &l2,int n,point* p){
  point t[MAXN],tt;
  int i,j,k=0;
  if (!inside_polygon(l1,n,p)||!inside_polygon(l2,n,p))
    return 0;
  for (i=0;i<n;i++)
    if (opposite_side(l1,l2,p[i],p[(i+1)%n])&&opposite_side(p[i],p[(i+1)%n],l1,l2))
      return 0;
    else if (dot_online_in(l1,p[i],p[(i+1)%n]))
      t[k++]=l1;
    else if (dot_online_in(l2,p[i],p[(i+1)%n]))
      t[k++]=l2;
    else if (dot_online_in(p[i],l1,l2))
      t[k++]=p[i];
  for (i=0;i<k;i++)
    for (j=i+1;j<k;j++){
      tt.x=(t[i].x+t[j].x)/2;
      tt.y=(t[i].y+t[j].y)/2;
      if (!inside_polygon(tt,n,p))
        return 0;     
    }
  return 1;
}

// 多边形重心
point barycenter(int n,point* p){
  point ret,t;
  double t1=0,t2;
  int i;
  ret.x=ret.y=0;
  for (i=1;i<n-1;i++)
    if (fabs(t2=xmult(p[0],p[i],p[i+1]))>eps){
      t=barycenter(p[0],p[i],p[i+1]);
      ret.x+=t.x*t2;
      ret.y+=t.y*t2;
      t1+=t2;
    }
  if (fabs(t1)>eps)
    ret.x/=t1,ret.y/=t1;
  return ret;
}

// 将多边形沿l1,l2 确定的直线切割在side 侧切割
// 保证l1,l2,side 不共线
void polygon_cut(int& n,point* p,CP &l1,CP &l2,CP &side){
  point pp[100];
  int m=0,i;
  for (i=0;i<n;i++){
    if (same_side(p[i],side,l1,l2))
      pp[m++]=p[i];
    if (!same_side(p[i],p[(i+1)%n],l1,l2)&&!(zero(xmult(p[i],l1,l2))&&zero(xmult(p[(i+1)%n],l1,l2))))
      pp[m++]=intersection(p[i],p[(i+1)%n],l1,l2);
  }
  for (n=i=0;i<m;i++)
    if (!i||!zero(pp[i].x-pp[i-1].x)||!zero(pp[i].y-pp[i-1].y))
      p[n++]=pp[i];
  if (zero(p[n-1].x-p[0].x)&&zero(p[n-1].y-p[0].y))
    n--;
  if (n<3)
    n=0;
}

// 求平行于v 的所有射线中， 穿过的凸包中最左边的点的坐标
// 凸包点按顺时针给出 
point vector_throw_convex(int n, point *convex, CP &v){
  int s = 0;double as = angle(v, convex[s], convex[(s + 1) % n]); 
  int t = n - 1;double at = angle(v, convex[t], convex[(t + 1) % n]);
  while (s < t){
    if (as >= at){s = t;break;}int mid = (s + t + 1) / 2;
    double amid = angle(v, convex[mid], convex[(mid + 1) % n]);
    if (amid <= as){s = mid;as = amid;}
    else{t = mid - 1;at = angle(v, convex[t], convex[(t + 1) % n]);}
  }
  return convex[(s + 1) % n];
}


// 求直线l1 是否穿过凸包, 凸包按顺时针给出， 返回是否穿过
// p 储存凸包内l1 共线的某点 
bool line_throw_convex(int n, point *convex, CL &l, point &p){
  point p1 = vector_throw_convex(n, convex, l.a - l.b);
  point p2 = vector_throw_convex(n, convex, l.b - l.a);
  line l2(p1, p2);p = intersection(l, l2);
  if (dot_online_in(p, l2)) return true;return false;
}

// 求射线是否穿过凸包, 凸包按顺时针给出， 返回是否穿过
// p 储存凸包内l1 共线的某点 
bool ray_throw_convex(int n, point *convex, CL &l, point &p){
  if (line_throw_convex(n, convex, l, p)){
    if (dmult(p, l.b, l.a) >= -eps) return true;return false;
  }
  return false;
}

// 求凸包直径, 输入要求顺时针输入凸包， 没有共线的点 
double convex_diameter(int n, point *con){
  int q=1;double ans=0;
  for(int p=0;p<n;++p)
  {
    while(xmult(con[(p+1)%n],con[(q+1)%n],con[p])<xmult(con[(p+1)%n],con[q],con[p]))
      q=(q+1)%n;
    ans=max(ans,max(dis(con[p],con[q]),dis(con[(p+1)%n],con[(q+1)%n])));      
  }
  return ans; 
} 

// 求凸包最小截面， 输入要求顺时针输入凸包
double convex_min_section(int n, point *con){
  int q=1;double ans=1000000000;
  for(int p=0;p<n;++p)
  {
    while(xmult(con[(p+1)%n],con[(q+1)%n],con[p])<xmult(con[(p+1)%n],con[q],con[p]))
      q=(q+1)%n;
    ans=min(ans,disptoline(con[q], con[p], con[p + 1]));      
  }
  return ans; 
} 
double convex_min_section2(int n, point *con){
  double l1 = 1000000000;
  for (int i = 0; i < n; ++i){
    point a = con[i] - con[(i + 1) % n];
    point b = vector_throw_convex(n, con, a);
    l1 = min(l1, disptoline(b, con[i], con[i + 1]));
  }
  return l1;
}

// 求两个不包含的凸包的最短距离, 逆时针输入背包 
double convex_min_dis(int n, point *a, int m, point *b){
  int p1 = 0, p2 = 0;
  double ans = 1<<30;
  for (int i = 0; i < n; ++i)
    if (a[i].y < a[p1].y) p1 = i;
  for (int i = 0; i < m; ++i)
    if (b[i].y > b[p2].y) p2 = i;
  for (int i = 0; i < n; ++i){
    double t = xmult(b[(p2 + 1) % m], a[p1], a[(p1 + 1) % n]);
    t -= xmult(b[p2], a[p1], a[(p1 + 1) % n]);
    //cout<<p1<<' '<<p2<<' '<<t<<endl;
    if (_sign(t) == 1){
      ans = min(ans, disptoseg(a[p1], b[p2], b[(p2 + 1) % m]));
      p2 = (p2 + 1) % m;
      --i;
    }else if (_sign(t) == 2){
      ans = min(ans, disptoseg(b[p2], a[p1], a[(p1 + 1) % n]));
      p1 = (p1 + 1) % n;
    }else{
      ans = min(ans, dissegtoseg(a[p1], a[(p1 + 1) % n], b[p2], b[(p2 + 1) % m]));
      p1 = (p1 + 1) % n;
      p2 = (p2 + 1) % m;
    }
  }
  return ans;
}

// 求多边形中最长的线段， 的长度， 线段储存在l 中
double inside_polygon_max(int n,point* p, line &l){
  double len = 0;
  for (int i = 0; i < n; ++i) 
    for (int j = i + 1; j < n; ++j){
      vector<point> points;
      points.clear();
      points.push_back(p[i]);
      points.push_back(p[j]);
      for (int a = 0; a < n; ++a)
        for (int b = a + 1; b < n; ++b){
          if (a == i) continue;
          if (parallel(p[i], p[j], p[a], p[b]))
            continue;
          point p1 = intersection(p[i], p[j], p[a], p[b]);
          if (dmult(p[a], p[b], p1) <= 0){
            points.push_back(p1);
          }
        }
      sort(points.begin(), points.end());

      int s = 0;
      for (int k = 0; k < points.size() - 1; ++k){
        if (zero(dis(points[k], points[k + 1]))) continue;
        point p1;
        p1 = (points[k] + points[k + 1]) / 2;
        if (inside_polygon(p1, n, p)) continue;
        double d = dis(points[s], points[k + 1]);
        if (len < d){
          len = d;
          l.a = points[s];
          l.b = points[k + 1];
        }
        s = k + 1;
      }
      double d = dis(points[s], points[points.size() - 1]);
      if (len < d){
        len = d;
        l.a = points[s];
        l.b = points[points.size() - 1];
      }
    }
  return len;
}

// 判断点知否在半平面内, 平面位于向量左侧 
bool phplaneout(CL &l, CP &p){
  return xmult(p, l.b, l.a) > eps;
}

// 求半平面交, 平面位于向量左侧
int halfpanelcross(int n, line *lines, point *p){
  int i;
  for (int i = 0; i < n; ++i)
    lines[i].getang();
  sort(lines, lines + n);
  int m = 1;
  for (int i = 1; i < n; ++i)
    if (!zero(lines[i].ang - lines[i - 1].ang))
      lines[m++] = lines[i];
  n = m;
  int bot = 0, top = 1;
  for (int i = 2; i < n; ++i){
    if ((parallel(lines[top], lines[top - 1])||parallel(lines[bot], lines[bot + 1])))
      return 0;
    while ((bot < top)&&(xmult(intersection(lines[top], lines[top - 1]), lines[i].b, lines[i].a) > eps))
      --top;
    while ((bot < top)&&(xmult(intersection(lines[bot], lines[bot + 1]), lines[i].b, lines[i].a) > eps))
      ++bot;
    ++top;
    lines[top] = lines[i];
  }
  while ((bot < top)&&(xmult(intersection(lines[top], lines[top - 1]), lines[bot].b, lines[bot].a) > eps))
    --top;  
  while ((bot < top)&&(xmult(intersection(lines[bot], lines[bot + 1]), lines[top].b, lines[top].a) > eps))
    ++bot;
  if (top <= bot + 1) return 0;
  n = 0;
  for (int i = bot; i < top; ++i)
    p[n++] = intersection(lines[i], lines[i + 1]);
  if (bot < top + 1)
    p[n++] = intersection(lines[bot], lines[top]);
  return n;
}

// graham算法顺时针构造包含所有共线点的凸包,O(nlogn)
point p1,p2;
int graham_cp(const void* a,const void* b){
  double ret=xmult(*((point*)a),*((point*)b),p1);
  return zero(ret)?(xmult(*((point*)a),*((point*)b),p2)>0?1:-1):(ret>0?1:-1);
}
void _graham(int n,point* p,int& s,point* ch){
  int i,k=0;
  for (p1=p2=p[0],i=1;i<n;p2.x+=p[i].x,p2.y+=p[i].y,i++)
    if (p1.y-p[i].y>eps||(zero(p1.y-p[i].y)&&p1.x>p[i].x))
      p1=p[k=i];
  p2.x/=n,p2.y/=n;
  p[k]=p[0],p[0]=p1;
  //cout<<n<<endl;
  qsort(p+1,n-1,sizeof(point),graham_cp);
  //cout<<n<<endl;
  for (ch[0]=p[0],ch[1]=p[1],ch[2]=p[2],s=i=3;i<n;ch[s++]=p[i++])
    for (;s>2&&xmult(ch[s-2],p[i],ch[s-1])<-eps;s--);
}

// 构造凸包接口函数, 传入原始点集大小n, 点集p(p 原有顺序被打乱!)
// 返回凸包大小, 凸包的点在convex 中
// 参数maxsize 为1 包含共线点, 为0 不包含共线点, 缺省为1
// 参数clockwise 为1 顺时针构造, 为0 逆时针构造, 缺省为1
// 在输入仅有若干共线点时算法不稳定, 可能有此类情况请另行处理!
// 不能去掉点集中重合的点
int graham(int n,point* p,point* convex,int maxsize=1,int dir=1){
  point* temp=new point[n];
  int s,i;
  _graham(n,p,s,temp);
  for (convex[0]=temp[0],n=1,i=(dir?1:(s-1));dir?(i<s):i;i+=(dir?1:-1)){
    if (maxsize||!zero(xmult(temp[i-1],temp[i],temp[(i+1)%s])))
      convex[n++]=temp[i];
    }
  delete []temp;
  return n;
}

//求入射边u关于边v的折射角，不考虑全反射，折射率为r
line refraction(CL &u, CL &v, CP &p, double r){
  line v2;
  v2.a = p;
  v2.b.x = v.b.y - v.a.y + p.x;
  v2.b.y = v.a.x - v.b.x + p.y;
  if (dmult(v2.b - v2.a, u.b - u.a) < 0) swap(v2.a, v2.b);
  double alpha = xmult(v2.b - v2.a, u.b - u.a) / len(v2.b - v2.a) / len(u.b - u.a);
  alpha = asin(alpha / r) + atan2(v2.b.y - v2.a.y, v2.b.x - v2.a.x);
  v2.a = p;
  v2.b.x = 10 * cos(alpha) + v2.a.x;
  v2.b.y = 10 * sin(alpha) + v2.a.y;
  return v2;
}

//求入射边v关于凸包折射两次的情况，出射角保存在v中，折射率为r
//如果不相交，返回false， 不考虑镜面反射和入射到凸包角上的情况
bool refreaction(int n, point p[], line &v, double r){
  int index = -1;
  line l[n];
  point p1;
  for (int i = 0; i < n; ++i){
    l[i].a = p[i];
    l[i].b = p[(i + 1) % n];
  }
  for (int i = 0; i < n; ++i){
    if (parallel(v, l[i])) continue;
    point p2 = intersection(v, l[i]);
    if (dmult(l[i].a, l[i].b, p2) >= 0) continue;
    if (dmult(p2, v.b, v.a) <= 0) continue;
    if ((index == -1)||(dis2(p2, v.a) < dis2(p1, v.a))){
      index = i;
      p1 = p2;
    }
  }
  if (index == -1) return 0;
  swap(l[0], l[index]);
  v = refraction(v, l[0], p1, r);
  index = -1;
  for (int i = 1; i < n; ++i){
    if (parallel(v, l[i])) continue;
    point p2 = intersection(v, l[i]);
    if (dmult(l[i].a, l[i].b, p2) >= 0) continue;
    if (dmult(p2, v.b, v.a) <= 0) continue;
    if ((index == -1)||(dis2(p2, v.a) < dis2(p1, v.a))){
      index = i;
      p1 = p2;
    }
  }
  swap(l[1], l[index]);
  v = refraction(v, l[1], p1, 1 / r);
  return true;
}
