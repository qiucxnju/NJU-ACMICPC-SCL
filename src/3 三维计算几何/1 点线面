// 计算cross product U x V
point3 xmult(const point3 &u, const point3 &v){
  point3 ret;
  ret.x = u.y * v.z - v.y * u.z;
  ret.y = u.z * v.x - u.x * v.z;
  ret.z = u.x * v.y - u.y * v.x;
  return ret;
}

// 计算dot product U . V
double dmult(const point3 &u, const point3 &v){
  return u.x * v.x + u.y * v.y + u.z * v.z;
}

// 取平面法向量
point3 pvec(const plane3 &s){
  return xmult(s.a - s.b, s.b - s.c);
}
point3 pvec(const point3 &s1, const point3 &s2, const point3 &s3){
  return xmult(s1 - s2, s2 - s3);
}

// 两点距离, 单参数取向量大小
double dis(const point3 &p1, const point3 &p2){
  return sqrt(sqr(p1.x - p2.x) + sqr(p1.y - p2.y) + sqr(p1.z - p2.z));
}
double dis2(const point3 &p1, const point3 &p2){
  return sqr(p1.x - p2.x) + sqr(p1.y - p2.y) + sqr(p1.z - p2.z);
}

// 向量大小
double len(const point3 &p){
  return sqrt(sqr(p.x) + sqr(p.y) + sqr(p.z));
}

// 判三点共线
int dots_inline(const point3 &p1, const point3 &p2,const point3 &p3){
  return len(xmult(p1 - p2, p2 - p3)) < eps;
}

// 判四点共面
int dots_onplane(const point3 &a, const point3 &b, const point3 &c, const point3 &d){
  return zero(dmult(pvec(a, b, c), d - a));
}

// 判点是否在线段上, 包括端点和共线
int dot_online_in(const point3 &p, const line3 &l){
  return zero(len(xmult(p - l.a, p - l.b)))&&
    (l.a.x - p.x) * (l.b.x - p.x) < eps&&
    (l.a.y - p.y) * (l.b.y - p.y) < eps&&
    (l.a.z - p.z) * (l.b.z - p.z) < eps;
}
int dot_online_in(const point3 &p, const point3 &l1, const point3 &l2){
  return zero(len(xmult(p - l1,p - l2)))&&
    (l1.x - p.x) * (l2.x - p.x) < eps&&
    (l1.y - p.y) * (l2.y - p.y) < eps&&
    (l1.z - p.z) * (l2.z - p.z) < eps;
}

// 判点是否在线段上, 不包括端点
int dot_online_ex(const point3 &p, const line3 &l){
  return dot_online_in(p, l) && (!(p == l.a))&&(!(p == l.b));
}
int dot_online_ex(const point3 &p, const point3 &l1, const point3 &l2){
  return dot_online_in(p, l1, l2) && (!(p == l1))&&(!(p == l2));
}

// 判点是否在空间三角形上, 包括边界, 三点共线无意义
int dot_inplane_in(const point3 &p, const plane3 &s){
  return zero(len(xmult(s.a - s.b, s.a - s.c)) - len(xmult(p - s.a, p - s.b))-
    len(xmult(p - s.b, p - s.c)) - len(xmult(p - s.c, p - s.a)));
}
int dot_inplane_in(const point3 &p, const point3 &s1, const point3 &s2, const point3 &s3){
  return zero(len(xmult(s1 - s2, s1 - s3)) - len(xmult(p - s1, p - s2))-
    len(xmult(p - s2, p - s3)) - len(xmult(p - s3, p - s1)));
}

// 判点是否在空间三角形上, 不包括边界, 三点共线无意义
int dot_inplane_ex(const point3 &p, const plane3 &s){
  return dot_inplane_in(p, s) && len(xmult(p - s.a, p - s.b)) > eps &&
    len(xmult(p - s.b, p - s.c)) > eps &&
    len(xmult(p - s.c, p - s.a)) > eps;
}
int dot_inplane_ex(const point3 &p, const point3 &s1, const point3 &s2, const point3 &s3){
  return dot_inplane_in(p, s1, s2, s3) && len(xmult(p - s1, p - s2)) > eps &&
    len(xmult(p - s2, p - s3)) > eps &&
    len(xmult(p - s3, p - s1)) > eps;
}

// 判两点在线段同侧, 点在线段上返回0, 不共面无意义
int same_side(const point3 &p1, const point3 &p2, const line3 &l){
  return dmult(xmult(l.a - l.b, p1 - l.b), xmult(l.a - l.b, p2 - l.b)) > eps;
}
int same_side(const point3 &p1, const point3 &p2,const point3 &l1, const point3 &l2){
  return dmult(xmult(l1 - l2, p1 - l2),xmult(l1 - l2, p2 - l2)) > eps;
}

// 判两点在线段异侧, 点在线段上返回0, 不共面无意义
int opposite_side(const point3 &p1, const point3 &p2, const line3 &l){
  return dmult(xmult(l.a - l.b, p1 - l.b), xmult(l.a - l.b, p2 - l.b)) < -eps;
}
int opposite_side(const point3 &p1, const point3 &p2,const point3 &l1, const point3 &l2){
  return dmult(xmult(l1 - l2, p1 - l2),xmult(l1 - l2, p2 - l2)) < -eps;
}

// 判两点在平面同侧, 点在平面上返回0
int same_side(const point3 &p1, const point3 &p2, const plane3 &s){
  return dmult(pvec(s), p1 - s.a) * dmult(pvec(s), p2 - s.a) > eps;
}
int same_side(const point3 &p1, const point3 &p2, const point3 &s1, const point3 &s2, const point3 &s3){
  return dmult(pvec(s1,s2,s3), p1 - s1) * dmult(pvec(s1,s2,s3), p2 - s1) > eps;
}

// 判两点在平面异侧, 点在平面上返回0
int opposite_side(const point3 &p1, const point3 &p2, const plane3 &s){
  return dmult(pvec(s), p1 - s.a) * dmult(pvec(s), p2 - s.a) < -eps;
}
int opposite_side(const point3 &p1, const point3 &p2, const point3 &s1, const point3 &s2, const point3 &s3){
  return dmult(pvec(s1,s2,s3), p1 - s1) * dmult(pvec(s1,s2,s3), p2 - s1) < -eps;
}

// 判两直线平行
int parallel(const line3 &u, const line3 &v){
  return len(xmult(u.a - u.b, v.a - v.b)) < eps;
}
int parallel(const point3 &u1, const point3 &u2, const point3 &v1, const point3 &v2){
  return len(xmult(u1 - u2, v1 - v2)) < eps;
}

// 判两平面平行
int parallel(const plane3 &u, const plane3 &v){
  return len(xmult(pvec(u) , pvec(v))) < eps;
}
int parallel(const point3 &u1, const point3 &u2, const point3 &u3, const point3 &v1,point3 v2,point3 v3){
  return len(xmult(pvec(u1, u2, u3), pvec(v1, v2, v3))) < eps;
}

// 判直线与平面平行
int parallel(const line3 &l, const plane3 &s){
  return zero(dmult(l.a - l.b, pvec(s)));
}
int parallel(const point3 &l1, const point3 &l2, const point3 &s1, const point3 &s2, const point3 &s3){
  return zero(dmult(l1 - l2, pvec(s1, s2, s3)));
}

// 判两直线垂直
int perpendicular(const line3 &u, const line3 &v){
  return zero(dmult(u.a - u.b, v.a - v.b));
}
int perpendicular(const point3 &u1, const point3 &u2, const point3 &v1, const point3 &v2){
  return zero(dmult(u1 - u2, v1 - v2));
}

// 判两平面垂直
int perpendicular(const plane3 &u, const plane3 &v){
  return zero(dmult(pvec(u), pvec(v)));
}
int perpendicular(const point3 &u1, const point3 &u2, const point3 &u3, const point3 &v1, const point3 &v2, const point3 &v3){
  return zero(dmult(pvec(u1, u2, u3), pvec(v1, v2, v3)));
}

// 判直线与平面平行
int perpendicular(const line3 &l, const plane3 &s){
  return len(xmult(l.a - l.b, pvec(s))) < eps;
}
int perpendicular(const point3 &l1, const point3 &l2, const point3 &s1, const point3 &s2, const point3 &s3){
  return len(xmult(l1 - l2, pvec(s1, s2, s3))) < eps;
}

// 判两线段相交, 包括端点和部分重合
int intersect_in(const line3 &u, const line3 &v){
  if (!dots_onplane(u.a, u.b, v.a, v.b))
    return 0;
  if (!dots_inline(u.a,u.b,v.a)||!dots_inline(u.a,u.b,v.b))
    return !same_side(u.a,u.b,v)&&!same_side(v.a,v.b,u);
  return dot_online_in(u.a,v)||dot_online_in(u.b,v)||dot_online_in(v.a,u)||dot_online_in(v.b,u);
}
int intersect_in(const point3 &u1, const point3 &u2, const point3 &v1, const point3 &v2){
  if (!dots_onplane(u1, u2, v1, v2))
    return 0;
  if (!dots_inline(u1,u2,v1)||!dots_inline(u1,u2,v2))
    return !same_side(u1,u2,v1,v2)&&!same_side(v1,v2,u1,u2);
  return dot_online_in(u1,v1,v2)||dot_online_in(u2,v1,v2)||dot_online_in(v1,u1,u2)||dot_online_in(v2,u1,u2);
}

// 判两线段相交, 不包括端点和部分重合
int intersect_ex(const line3 &u, const line3 &v){
  return dots_onplane(u.a,u.b,v.a,v.b)&&opposite_side(u.a,u.b,v)&&opposite_side(v.a,v.b,u);
}
int intersect_ex(const point3 &u1, const point3 &u2, const point3 &v1, const point3 &v2){
  return dots_onplane(u1,u2,v1,v2)&&opposite_side(u1,u2,v1,v2)&&opposite_side(v1,v2,u1,u2);
}

// 判线段与空间三角形相交, 包括交于边界和( 部分) 包含
int intersect_in(const line3 &l, const plane3 &s){
  return !same_side(l.a,l.b,s)&&!same_side(s.a,s.b,l.a,l.b,s.c)&&
    !same_side(s.b,s.c,l.a,l.b,s.a)&&!same_side(s.c,s.a,l.a,l.b,s.b);
}
int intersect_in(const point3 &l1, const point3 &l2, const point3 &s1, const point3 &s2, const point3 &s3){
  return !same_side(l1,l2,s1,s2,s3)&&!same_side(s1,s2,l1,l2,s3)&&
    !same_side(s2,s3,l1,l2,s1)&&!same_side(s3,s1,l1,l2,s2);
}

// 判线段与空间三角形相交, 不包括交于边界和( 部分) 包含
int intersect_ex(const line3 &l, const plane3 &s){
  return opposite_side(l.a,l.b,s)&&opposite_side(s.a,s.b,l.a,l.b,s.c)&&
    opposite_side(s.b,s.c,l.a,l.b,s.a)&&opposite_side(s.c,s.a,l.a,l.b,s.b);
}
int intersect_ex(const point3 &l1, const point3 &l2, const point3 &s1, const point3 &s2, const point3 &s3){
  return opposite_side(l1,l2,s1,s2,s3)&&opposite_side(s1,s2,l1,l2,s3)&&
    opposite_side(s2,s3,l1,l2,s1)&&opposite_side(s3,s1,l1,l2,s2);
}

// 计算两直线交点, 注意事先判断直线是否共面和平行 !
// 线段交点请另外判线段相交 (同时还是要判断是否平行 !)
point3 intersection(const line3 &u, const line3 &v){
  point3 ret=u.a;
  double t=((u.a.x-v.a.x)*(v.a.y-v.b.y)-(u.a.y-v.a.y)*(v.a.x-v.b.x))
      /((u.a.x-u.b.x)*(v.a.y-v.b.y)-(u.a.y-u.b.y)*(v.a.x-v.b.x));
  ret.x+=(u.b.x-u.a.x)*t;
  ret.y+=(u.b.y-u.a.y)*t;
  ret.z+=(u.b.z-u.a.z)*t;
  return ret;
}
point3 intersection(const point3 &u1, const point3 &u2, const point3 &v1, const point3 &v2){
  point3 ret=u1;
  double t=((u1.x-v1.x)*(v1.y-v2.y)-(u1.y-v1.y)*(v1.x-v2.x))
      /((u1.x-u2.x)*(v1.y-v2.y)-(u1.y-u2.y)*(v1.x-v2.x));
  ret.x+=(u2.x-u1.x)*t;
  ret.y+=(u2.y-u1.y)*t;
  ret.z+=(u2.z-u1.z)*t;
  return ret;
}

// 计算直线与平面交点, 注意事先判断是否平行, 并保证三点不共线!
// 线段和空间三角形交点请另外判断
point3 intersection(const line3 &l, const plane3 &s){
  point3 ret=pvec(s);
  double t=(ret.x*(s.a.x-l.a.x)+ret.y*(s.a.y-l.a.y)+ret.z*(s.a.z-l.a.z))/
    (ret.x*(l.b.x-l.a.x)+ret.y*(l.b.y-l.a.y)+ret.z*(l.b.z-l.a.z));
  ret.x=l.a.x+(l.b.x-l.a.x)*t;
  ret.y=l.a.y+(l.b.y-l.a.y)*t;
  ret.z=l.a.z+(l.b.z-l.a.z)*t;
  return ret;
}
point3 intersection(const point3 &l1, const point3 &l2, const point3 &s1,const point3 &s2, const point3 &s3){
  point3 ret=pvec(s1,s2,s3);
  double t=(ret.x*(s1.x-l1.x)+ret.y*(s1.y-l1.y)+ret.z*(s1.z-l1.z))/
    (ret.x*(l2.x-l1.x)+ret.y*(l2.y-l1.y)+ret.z*(l2.z-l1.z));
  ret.x=l1.x+(l2.x-l1.x)*t;
  ret.y=l1.y+(l2.y-l1.y)*t;
  ret.z=l1.z+(l2.z-l1.z)*t;
  return ret;
}

// 计算两平面交线, 注意事先判断是否平行, 并保证三点不共线 !
line3 intersection(const plane3 &u, const plane3 &v){
  line3 ret;
  ret.a=parallel(v.a,v.b,u.a,u.b,u.c)?intersection(v.b,v.c,u.a,u.b,u.c):intersection(v.a,v.b,u.a,u.b,u.c);
  ret.b=parallel(v.c,v.a,u.a,u.b,u.c)?intersection(v.b,v.c,u.a,u.b,u.c):intersection(v.c,v.a,u.a,u.b,u.c);
  return ret;
}
line3 intersection(const point3 &u1, const point3 &u2, const point3 &u3, const point3 &v1, const point3 &v2, const point3 &v3){
  line3 ret;
  ret.a=parallel(v1,v2,u1,u2,u3)?intersection(v2,v3,u1,u2,u3):intersection(v1,v2,u1,u2,u3);
  ret.b=parallel(v3,v1,u1,u2,u3)?intersection(v2,v3,u1,u2,u3):intersection(v3,v1,u1,u2,u3);
  return ret;
}

// 点到直线距离
double ptoline(const point3 &p, const line3 &l){
  return len(xmult(p - l.a, l.b - l.a))/dis(l.a,l.b);
}
double ptoline(const point3 &p, const point3 &l1, const point3 &l2){
  return len(xmult(p - l1, l2 - l1))/dis(l1,l2);
}

// 点到平面距离
double ptoplane(const point3 &p, const plane3 &s){
  return fabs(dmult(pvec(s), p - s.a))/len(pvec(s));
}
double ptoplane(const point3 &p, const point3 &s1, const point3 &s2, const point3 &s3){
  return fabs(dmult(pvec(s1,s2,s3), p - s1))/len(pvec(s1,s2,s3));
}

// 直线到直线距离
double linetoline(const line3 &u, const line3 &v){
  point3 n=xmult(u.a - u.b, v.a - v.b);
  return fabs(dmult(u.a - v.a,n))/len(n);
}
double linetoline(const point3 &u1, const point3 &u2, const point3 &v1, const point3 &v2){
  point3 n=xmult(u1 - u2, v1 - v2);
  return fabs(dmult(u1 - v1,n))/len(n);
}

// 两直线夹角cos 值
double angle_cos(const line3 &u, const line3 &v){
  return dmult(u.a - u.b, v.a - v.b)/len(u.a - u.b)/len(v.a - v.b);
}
double angle_cos(const point3 &u1, const point3 &u2, const point3 &v1, const point3 &v2){
  return dmult(u1 - u2, v1 - v2)/len(u1 - u2)/len(v1 - v2);
}

// 两平面夹角cos 值
double angle_cos(const plane3 &u, const plane3 &v){
  return dmult(pvec(u),pvec(v))/len(pvec(u))/len(pvec(v));
}
double angle_cos(const point3 &u1, const point3 &u2, const point3 &u3, const point3 &v1, const point3 &v2, const point3 &v3){
  return dmult(pvec(u1,u2,u3),pvec(v1,v2,v3))/len(pvec(u1,u2,u3))/len(pvec(v1,v2,v3));
}

// 直线平面夹角sin 值
double angle_sin(const line3 &l, const plane3 &s){
  return dmult(l.a - l.b,pvec(s))/len(l.a - l.b)/len(pvec(s));
}
double angle_sin(const point3 &l1,const point3 &l2, const point3 &s1, const point3 &s2, const point3 &s3){
  return dmult(l1 - l2,pvec(s1,s2,s3))/len(l1 - l2)/len(pvec(s1,s2,s3));
}